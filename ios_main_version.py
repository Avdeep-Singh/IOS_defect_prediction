# -*- coding: utf-8 -*-
"""ios_main_version.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ISylBM3PiaBzbDXq_-8grPFBqFE9PE2-
"""

!pip freeze > requirements.txt

import pandas as pd

master_data = pd.read_csv('ios.csv',sep=',', encoding='latin-1')
print('data shape: ', master_data.shape)
master_data.head()

master_data.info()

mydataset_without_null = master_data.fillna(0)
mydataset_without_null.info()

data_copy = mydataset_without_null.drop(['ios version'], axis=1)
data_copy = data_copy.drop(['total_bugs'], axis=1)

data_copy.info()

pred_data = pd.read_csv('pred.csv',sep=',', encoding='latin-1')
pred_data

summ=0
heatmap_list=[]

def train(i):
    try:
      y=data_copy.iloc[:, i].values
      x=data_copy.iloc[:, 53].values
      x=x.reshape(-1,1)
      from sklearn.ensemble import GradientBoostingClassifier
      from sklearn.model_selection import train_test_split
      #x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.01, shuffle=True)
      clf = GradientBoostingClassifier(n_estimators=100, learning_rate=2,max_depth=1, random_state=42).fit(x, y)

      pred_data = pd.read_csv('pred.csv',sep=',', encoding='latin-1')
      df = pred_data.drop(['ios version'], axis=1)

      f_x=df['ios_version'].values
      f_x=f_x.reshape(-1,1)

      pred = clf.predict(f_x)
      print(pred)
      type(pred)
      temp = pred[:1]
      global summ
      summ = summ + temp
      global heatmap_list
      heatmap_list.append(pred.item())


    except:
      print('--------------------------------------------------------------------------------------------------------------ERROR-------',i)
      train(i)


for i in range (53):
  print('-------------------------------------------------',data_copy.columns[i],'--------------------------------------------------------',i)

  train(i)

print(heatmap_list)

actual_list = [0,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0]

import matplotlib.pyplot as plt
import numpy
from sklearn import metrics

confusion_matrix = metrics.confusion_matrix(actual_list, heatmap_list)

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = ['1','0'])
cm_display.plot()
plt.show()

from sklearn.metrics import accuracy_score
accuracy_score(actual_list,heatmap_list)

if summ[0]>3:
  if summ[0]>6:
    print('High risk of updating')
  else:
    print("Medium risk of updating")
else:
  print('Low risk of updating')

master_data.columns

import numpy as np

columns = master_data.drop(['ios version'], axis=1)
columns = columns.drop(['ios_version'], axis=1)
columns = columns.drop(['total_bugs'], axis=1)
heatmap_list=np.array(heatmap_list)

columns=columns.columns
heatmap_data = pd.DataFrame(heatmap_list, columns)

heatmap_data.head()

heatmap_list=np.array(heatmap_list)

import numpy as np
import seaborn as sn
import matplotlib.pyplot as plt


plt.figure(figsize = (50,50))
sn.heatmap(data=heatmap_data, annot=True, linewidths=.5)
# displaying the plotted heatmap
plt.show()

columns = ['ios version', 'total_bugs']
graph_data = pd.DataFrame(master_data, columns=columns)

graph_data

import plotly.express as px
import pandas as pd

fig = px.line_polar(graph_data, r='total_bugs', theta='ios version', line_close=True)
fig.show()

import numpy as np
import matplotlib.pyplot as plt

plt.figure(figsize =(100, 7))
plt.bar(graph_data['ios version'], graph_data['total_bugs'])

import numpy as np
np.corrcoef(mydataset_without_null['slow performence'], mydataset_without_null['ios_version'])

import numpy as np
np.corrcoef(mydataset_without_null['Battery'], mydataset_without_null['slow performence'])

import numpy as np
np.corrcoef(mydataset_without_null['ios_version'], mydataset_without_null['Battery'])

import numpy as np
np.corrcoef(mydataset_without_null['slow performence'], mydataset_without_null['Battery'])

from scipy.stats import pearsonr

pearsonr(mydataset_without_null['ios_version'], mydataset_without_null['slow performence'])

from scipy.stats import pearsonr

pearsonr(mydataset_without_null['Battery'], mydataset_without_null['slow performence'])

from scipy.stats import pearsonr

pearsonr(mydataset_without_null['Battery'], mydataset_without_null['ios_version'])